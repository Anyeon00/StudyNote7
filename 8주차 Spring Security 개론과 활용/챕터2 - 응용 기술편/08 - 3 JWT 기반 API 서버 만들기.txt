[08 Spring Security with JWT Part. 1
  - JWT 기반 API 서버 만들기]


1. 의존성 추가 : java-jwt
2. application.yml 설정
jwt:
  header: token	# HTTP 헤더에서 jwt가 저장될 key
  issuer: prgrms	# 토큰 발행자
  client-secret: EENY5W0eegTf1naQB2eDeyCLl5kRS2b8xa5c4qLdS0hmVjtbvo8t0yhPMcAmtPuQ
  # jwt구조 중 signature에서 사용될 암호화 키 *(8-2참고)
  expiry-seconds: 60	# 60초 후 만료

3. SpringSecurity Configuration클래스의 configure(HttpSecurity http)메서드 설정
http
  //경로 인가 설정
  .authorizeRequests().antMatchers("/").permitAll()
  //필요없는 것들 disable
  .csrf().disable()
  .headers().disable()
  .formLogin().disable()
  .httpBasic().disable()
  .rememberMe().disable()
  .logout().disable()
  //새로 추가
  //세션 사용 끄기
  sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATLESS);

4. JwtConfigure 클래스 생성
application.yml파일의 설정 내용을 바인딩하는 클래스
ex)
@Component
@ConfigurationProperties(prefix = "jwt")
@Getter
@Setter
@ToString
public class JwtConfigure{
  private String header;
  private String issuer;
  private String clientSecret;
  private int expirySeconds;

  //토큰을 만들어주는 메서드
  public String sign(Claims claims){
    Date now = new Date();
    JWTCreator.Builder builder = com.auth0.jwt.JWT.create();
    builder.withIssuer(issuer);
    builder.withIssuedAt(now);
    //토큰만료시간 설정
    if(expirySeconds > 0){
      builder.withExpiresAt(new Date(now.getTime() + expirySeconds * 1000));
    }
    builder.withClaims("username", claims.username);
    builder.withArrayClaim("roles", claims.roles);
    return builder.sign(algorithm);
  }

  //토큰을 검증해서 Claims로 리턴하는 메서드
  public String verify(String token){
    return new Claims(jwtVerifier.verify(token));
  }
}

5. Jwt 클래스 생성
ex)
public class Jwt{
  private final String issuer;
  private final String clientSecret;
  priavate final int expirySeconds;
  
  private final Algorithm algorithm;
  private final JWTVerifier jwtVerifier;

  public Jwt(String issuer, String clientSecret, int expirySeconds){
    this.issuer = issuer;
    this.clientSecret = clientSecret;
    this.expirySeconds = expirySeconds;
    this.algorithm = Algorithm.HMAC512(clientSecret);
    this.jwtVerifier = com.auth0.jwt.JWT.require(algorithm)
      .withIssuer(issuer)
      .build();
  }
  // JWT토큰을 만들거나 검증할 때, 필요한 데이터를 전달하기 위한 클래스
  static public class Claims{
    String username;
    String[] roles;
    Date iat;
    Date exp;
    private Claims(){}
    Claims(DecodedJWT decodedJWT){
      Claim username = decodedJWT.getClaim("username");
      if(!username.isNull()){
        this.username = username.asString();
      }
      if(!roles.isNull()){
        this.roles = roles.asArray(String.class);
      }
      this.iat = decoded.JWT.getIssuedAt();
      this.exp = decodedJWT.getExpiresAt();
    }
    public static Claims from(String username, String[] roles){
      Claims claims = new Claims();
      claims.username = username;
      claims.roles = roles;
      return claims;
    }
    public Map<String, Object> asMap(){
      Map<String, Object> map = new HashMap<>();
      map.put("username", username);
      map.put("roles", roles);
      map.put("iat", iat());
      map.put("exp", exp());
      return map;
    }
    public long iat(){
      return iat != null ? iat.getTime() : -1;
    }
    public long exp(){
      return exp != null ? iat.getTime() : -1;
    }
}

6. WebSecurityConfigure 클래스 생성 (생성한 JWT를 Bean으로 등록하기 위해)
상속 : extends WebSecurityConfigurerAdapter 
클래스단위 어노테이션 : @Configuration, @EnableWebSecurity
데이터 멤버 : private JwtConfigure jwtConfigure, private UserService userService
Setter :
@Autowired
public void setJwtConfigure(JwtConfigure jwtConfigure){
  this.jwtConfigure = jwtConfigure;
}
@Autowired
public void setUserService(UserService userService){
  this.userService = userService;
}
빈 등록:
@Bean
public Jwt jwt(){
  return new Jwt(
    jwtConfigure.getIssuer(),
    jwtConfigure.getClientSecret(),
    jwtConfigure.getExpirySeconds()
  );
}

7. JWT 관련 컨트롤러 작성
...?







