[02 Spring Security Architecture 
  - Spring Security Architecture]

Security 동작 크게 2단계
1. AuthenticationManager : 사용자 인증 관련 처리 (인증)
2. AccessDecisionManager : 사용자의 리소스 접근 권한 확인 (인가)


<중요>
스프링 시큐리티는 필터(구현체)의 목록임 *서블릿 필터 (javax.servlet.Filter 인터페이스 구현체)
즉, 필터체인(FilterChainProxy)과 같음 
보통 springSecurityFilterChain 이라는 이름으로 Bean 등록됨

웹 요청은 필터 체인을 차례로 통과하게 됨
응답은 필터의 역순으로 통과하여 나감

구체적으로 
웹 요청 - 서블릿 컨테이너 - DelegatingFilterProxy - FilterChainProxy(이름:springSecurityFilterChain)
* DelegeatingFilterProxy가 요청을 FilterChain으로 전달해줌(FilterChain을 가리킴)



FilterChainProxy를 구성하는 주요 Filter 목록
- ChannelProcessingFilter 
웹 요청이 어떤 프로토콜로 (http 또는 https) 전달되어야 하는지 처리 
- SecurityContextPersistenceFilter 
SecurityContextRepository를 통해 SecurityContext를 Load/Save 처리
* (사용자요청시 다른필터에서 인증여부를 처리하여 생성된 Authentication을) 세션이 유지되는 동안 보관(인가처리때 쓰는듯)
- LogoutFilter
로그아웃 URL로 요청을 감시하여 매칭되는 요청이 있으면 해당 사용자를 로그아웃 시킴
- UsernamePasswordAuthenticationFilter 
ID/비밀번호 기반 Form 인증 요청 URL(기본값: /login) 을 감시하여 사용자를 인증함
- DefaultLoginPageGeneratingFilter
로그인을 수행하는데 필요한 HTML을 생성함
- RequestCacheAwareFilter
로그인 성공 이후 인증 요청에 의해 가로채어진 사용자의 원래 요청으로 이동하기 위해 사용됨
- SecurityContextHolderAwareRequestFilter
서블릿 3 API 지원을 위해 HttpServletRequest를 HttpServletRequestWrapper 하위 클래스로 감쌈
- RememberMeAuthenticationFilter
요청의 일부로 remeber-me 쿠키 제공 여부를 확인하고, 쿠키가 있으면 사용자 인증을 시도함
- AnonymousAuthenticationFilter
해당 인증 필터에 도달할때까지 사용자가 아직 인증되지 않았다면, 익명 사용자로 처리하도록 함
- ExceptionTranslationFilter
요청을 처리하는 도중 발생할 수 있는 예외에 대한 라우팅과 위임을 처리함
- FilterSecurityInterceptor
접근 권한 확인을 위해 요청을 AccessDecisionManager로 위임 (인가에 해당하는 필터)(3-2참고)
* 처리되는 순서대로임

* SpringSecurityConfiguration클래스의 configure(HttpSecurity http) 메서드에서 필터 추가 및 설정 가능

참고(공식문서 - architecture)
https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters

















